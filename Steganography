import cv2
import numpy as np
from hashlib import sha256
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.kdf.scrypt import Scrypt
from cryptography.hazmat.backends import default_backend
import base64

# Função para embutir texto em uma imagem usando Steganography
def embed_text(image_path, text, output_path):
    image = cv2.imread(image_path)
    binary_text = ''.join(format(ord(char), '08b') for char in text)
    binary_text += '1111111111111110'  # Delimitador para indicar o fim do texto
    data_index = 0

    for row in image:
        for pixel in row:
            for channel in range(3):
                if data_index < len(binary_text):
                    pixel[channel] = int(format(pixel[channel], '08b')[:-1] + binary_text[data_index], 2)
                    data_index += 1

    cv2.imwrite(output_path, image)

# Função para recuperar texto de uma imagem alterada pela técnica de Steganography
def extract_text(image_path):
    image = cv2.imread(image_path)
    binary_text = ''
    for row in image:
        for pixel in row:
            for channel in range(3):
                binary_text += format(pixel[channel], '08b')[-1]

    all_bytes = [binary_text[i:i+8] for i in range(0, len(binary_text), 8)]
    decoded_text = ''
    for byte in all_bytes:
        if decoded_text[-8:] == '11111110':
            break
        decoded_text += chr(int(byte, 2))

    return decoded_text[:-8]

# Função para gerar o hash das imagens
def generate_hash(image_path):
    with open(image_path, 'rb') as f:
        bytes = f.read()
        readable_hash = sha256(bytes).hexdigest()
    return readable_hash

# Função para encriptar a mensagem usando criptografia de chave pública e privada
def encrypt_message(message, public_key):
    encrypted = public_key.encrypt(
        message.encode(),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return base64.b64encode(encrypted).decode()

# Função para decriptar a mensagem usando criptografia de chave pública e privada
def decrypt_message(encrypted_message, private_key):
    decrypted = private_key.decrypt(
        base64.b64decode(encrypted_message),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return decrypted.decode()

# Geração de chaves pública e privada
private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048,
    backend=default_backend()
)
public_key = private_key.public_key()

# Menu de opções
def menu():
    while True:
        print("\nMenu de Opções:")
        print("(1) Embutir texto em uma imagem usando Steganography")
        print("(2) Recuperar texto de uma imagem alterada pela técnica de Steganography")
        print("(3) Gerar o hash das imagens original e alterada pela técnica de Steganography")
        print("(4) Encriptar a mensagem original usando criptografia de chave pública e privada")
        print("(5) Decriptar o texto encriptado usando criptografia de chave pública e privada")
        print("(S ou s) Sair")

        choice = input("Escolha uma opção: ")

        if choice == '1':
            image_path = input("Caminho da imagem original: ")
            text = input("Texto a ser embutido: ")
            output_path = input("Caminho para salvar a imagem alterada: ")
            embed_text(image_path, text, output_path)
            print("Texto embutido com sucesso!")

        elif choice == '2':
            image_path = input("Caminho da imagem alterada: ")
            extracted_text = extract_text(image_path)
            print("Texto extraído: ", extracted_text)

        elif choice == '3':
            original_image_path = input("Caminho da imagem original: ")
            altered_image_path = input("Caminho da imagem alterada: ")
            original_hash = generate_hash(original_image_path)
            altered_hash = generate_hash(altered_image_path)
            print("Hash da imagem original: ", original_hash)
            print("Hash da imagem alterada: ", altered_hash)

        elif choice == '4':
            message = input("Mensagem a ser encriptada: ")
            encrypted_message = encrypt_message(message, public_key)
            print("Mensagem encriptada: ", encrypted_message)
            image_path = input("Caminho da imagem original: ")
            output_path = input("Caminho para salvar a imagem alterada: ")
            embed_text(image_path, encrypted_message, output_path)
            print("Mensagem encriptada embutida com sucesso!")

        elif choice == '5':
            image_path = input("Caminho da imagem alterada: ")
            extracted_text = extract_text(image_path)
            decrypted_message = decrypt_message(extracted_text, private_key)
            print("Mensagem decriptada: ", decrypted_message)

        elif choice.lower() == 's':
            print("Encerrando a aplicação.")
            break

        else:
            print("Opção inválida. Tente novamente.")

# Executar o menu
menu()
